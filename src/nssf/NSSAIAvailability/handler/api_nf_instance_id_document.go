/*
 * NSSF NSSAI Availability
 *
 * NSSF NSSAI Availability Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.2.0-alpha.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package handler

import (
	"gogc/src/common/logger"
	"gogc/src/common/signal"
	"gogc/src/model"
	"gogc/src/nrf/NFDiscovery/scenario"
	"net/http"

	"github.com/gin-gonic/gin"
)

// NSSAIAvailabilityDelete - Deletes an already existing S-NSSAIs per TA provided by the NF service consumer (e.g AMF)
func NSSAIAvailabilityDelete(c *gin.Context) {

	logger.Debug("NSSAIAvailabilityDelete START")
	defer logger.Debug("NSSAIAvailabilityDelete END")

	// Get Parameter
	request := signal.RequestInit(c)
	request.Params["nfId"] = c.Param("nfId")
	logger.Debug("request:%#+v", request)

	// Check Mandatory Parameter
	if request.Params["nfId"] == "" {
		status := http.StatusBadRequest
		detail := scenario.ErrorDetailMandatoryIeIncorrect
		cause := scenario.MandatoryIeIncorrect
		response := model.ProblemDetails{Status: &status, Detail: &detail, Cause: &cause}
		c.JSON(http.StatusBadRequest, response)
		return
	}

	// Call Scenario Function
	response, err := scenario.NSSAIAvailabilityDelete(request)
	// logger.Debug("response:%#+v, err:%v", response, err)

	if err == nil {
		c.JSON(http.StatusOK, response)
	} else {
		c.JSON(http.StatusNotFound, response)
	}
}

// NSSAIAvailabilityPatch - Updates an already existing S-NSSAIs per TA provided by the NF service consumer (e.g AMF)
func NSSAIAvailabilityPatch(c *gin.Context) {

	logger.Debug("NSSAIAvailabilityPatch START")
	defer logger.Debug("NSSAIAvailabilityPatch END")

	// Get Parameter
	request := signal.RequestInit(c)
	request.Params["nfId"] = c.Param("nfId")
	logger.Debug("request:%#+v", request)

	// Check Mandatory Parameter
	if request.Params["nfId"] == "" {
		status := http.StatusBadRequest
		detail := scenario.ErrorDetailMandatoryIeIncorrect
		cause := scenario.MandatoryIeIncorrect
		response := model.ProblemDetails{Status: &status, Detail: &detail, Cause: &cause}
		c.JSON(http.StatusBadRequest, response)
		return
	}

	// Call Scenario Function
	response, err := scenario.NSSAIAvailabilityPatch(request)
	// logger.Debug("response:%#+v, err:%v", response, err)

	if err == nil {
		c.JSON(http.StatusOK, response)
	} else {
		c.JSON(http.StatusNotFound, response)
	}
}

// NSSAIAvailabilityPut - Updates/replaces the NSSF with the S-NSSAIs the NF service consumer (e.g AMF)supports per TA
func NSSAIAvailabilityPut(c *gin.Context) {

	logger.Debug("NSSAIAvailabilityPut START")
	defer logger.Debug("NSSAIAvailabilityPut END")

	// Get Parameter
	request := signal.RequestInit(c)
	request.Params["nfId"] = c.Param("nfId")
	logger.Debug("request:%#+v", request)

	// Check Mandatory Parameter
	if request.Params["nfId"] == "" {
		status := http.StatusBadRequest
		detail := scenario.ErrorDetailMandatoryIeIncorrect
		cause := scenario.MandatoryIeIncorrect
		response := model.ProblemDetails{Status: &status, Detail: &detail, Cause: &cause}
		c.JSON(http.StatusBadRequest, response)
		return
	}

	// Call Scenario Function
	response, err := scenario.NSSAIAvailabilityPut(request)
	// logger.Debug("response:%#+v, err:%v", response, err)

	if err == nil {
		c.JSON(http.StatusOK, response)
	} else {
		c.JSON(http.StatusNotFound, response)
	}
}

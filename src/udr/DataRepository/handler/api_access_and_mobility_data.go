/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 2.2.0-alpha.7
 * Generated by: OpenAPI Generator (https://handler-generator.tech)
 */

package handler

import (
	"gogc/src/common/logger"
	"gogc/src/common/signal"
	"gogc/src/model"
	"gogc/src/udr/DataRepository/scenario"
	"net/http"

	"github.com/gin-gonic/gin"
)

// CreateOrReplaceAccessAndMobilityData - Creates and updates the access and mobility exposure data for a UE
func CreateOrReplaceAccessAndMobilityData(c *gin.Context) {

	logger.Debug("CreateOrReplaceAccessAndMobilityData START")
	defer logger.Debug("CreateOrReplaceAccessAndMobilityData END")

	// Get Parameter
	request := signal.RequestInit(c)
	request.Params["ueId"] = c.Param("ueId")
	logger.Debug("request:%#+v", request)

	// Get Json Request
	jsonData := model.AccessAndMobilityData{}
	err := c.ShouldBindJSON(&jsonData)
	if err != nil {
		// Set Error Details
		logger.Error("err:%v", err)
		status := http.StatusNotFound
		detail := scenario.ErrorDetailUserNotFoud
		cause := scenario.UserNotFoud
		problemDetail := model.ProblemDetails{Status: &status, Detail: &detail, Cause: &cause}
		c.JSON(http.StatusBadRequest, problemDetail)
		return
	}

	// Call Scenario Function
	response, err := scenario.CreateOrReplaceAccessAndMobilityData(request, &jsonData)

	if err == nil {
		c.JSON(http.StatusOK, &jsonData)
	} else {
		c.JSON(http.StatusNotFound, response)
	}
}

// DeleteAccessAndMobilityData - Deletes the access and mobility exposure data for a UE
func DeleteAccessAndMobilityData(c *gin.Context) {

	logger.Debug("DeleteAccessAndMobilityData START")
	defer logger.Debug("DeleteAccessAndMobilityData END")

	// Get Parameter
	request := signal.RequestInit(c)
	request.Params["ueId"] = c.Param("ueId")
	logger.Debug("request:%#+v", request)

	// Call Scenario Function
	response, err := scenario.DeleteAccessAndMobilityData(request)
	logger.Debug("response:%#+v, err:%v", response, err)

	if err == nil {
		c.JSON(http.StatusOK, response)
	} else {
		c.JSON(http.StatusNotFound, response)
	}
}

// QueryAccessAndMobilityData - Retrieves the access and mobility exposure data for a UE
func QueryAccessAndMobilityData(c *gin.Context) {

	logger.Debug("QueryAccessAndMobilityData START")
	defer logger.Debug("QueryAccessAndMobilityData END")

	// Get Parameter
	request := signal.RequestInit(c)
	request.Params["ueId"] = c.Param("ueId")
	logger.Debug("request:%#+v", request)

	// Call Scenario Function
	response, err := scenario.QueryAccessAndMobilityData(request)
	logger.Debug("response:%#+v, err:%v", response, err)

	if err == nil {
		c.JSON(http.StatusOK, response)
	} else {
		c.JSON(http.StatusNotFound, response)
	}
}

// UpdateAccessAndMobilityData - Updates the access and mobility exposure data for a UE
func UpdateAccessAndMobilityData(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
